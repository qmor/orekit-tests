package GOST_R_25645_166_2004;

import org.hipparchus.RealFieldElement;
import org.hipparchus.geometry.euclidean.threed.FieldVector3D;
import org.hipparchus.geometry.euclidean.threed.Vector3D;
import org.orekit.frames.Frame;
import org.orekit.models.earth.atmosphere.Atmosphere;
import org.orekit.time.AbsoluteDate;
import org.orekit.time.FieldAbsoluteDate;
class GOST_R_25645_166_2014_CONST
{

	// Таблица 1 - Коэффициенты аппроксимации зависимости полугодового эффекта от времени года:

	public static final double A[] = new double[] { -2.53418e-02, -2.44075e-03, 3.08389e-06,
			2.90115e-06, -4.99606e-08, 3.36327e-10,
			-1.0966e-12, 1.73227e-15, -1.06271e-18 };

	// Таблицы 2-3 (коэффициенты a-n для двух высотных диапазонов):

	// Шкала опорных значений индекса солнечной активности, по которой выстроены таблицы 2-3
	public static final double F0_arr[] = { 75.0, 100.0, 125.0, 150.0, 175.0, 200.0, 250.0 };

	public static final double a_low_table[][] = {
			{120.0,			120.0	,		120.0,			120.0,			120.0,			120.0,			120.0},			// ah
			{26.8629,		27.4598	,		28.6395,		29.6418,		30.1671,		29.7578,		30.7854},		// a0
			{-0.451674,		-0.463668,		-0.490987,		-0.514957,		-0.527837,		-0.517915,		-0.545695},		// a1
			{0.00290397,	0.002974,		0.00320649,		0.00341926,		0.00353211,		0.00342699,		0.00370328},	// a2
			{-1.06953E-05,	-0.000010753,	-0.000011681,	-1.25785E-05,	-1.30227E-05,	-1.24137E-05,	-1.37072E-05},	// a3
			{2.21598E-08,	2.17059E-08,	2.36847E-08	,	2.5727E-08,		2.66455E-08,	2.48209E-08,	2.80614E-08},	// a4
			{-2.42941E-11,	-2.30249E-11,	-2.51809E-11,	-2.75874E-11,	-2.85432E-11,	-2.58413E-11,	-3.00184E-11},	// a5
			{1.09926E-14,	1.00123E-14,	1.09536E-14,	1.21091E-14,	1.25009E-14,	1.09383E-14,	1.31142E-14} };	// a6

	public static final double a_high_table[][] = {
			{500.0,			500.0,			500.0,			500.0,			500.0,			500.0,			500.0},			// ah
			{17.8781,		-2.54909,		-13.9599,		-23.3079,		-14.7264,		-4.912,			-5.40952},		// a0
			{-0.132025,		0.0140064,		0.0844951,		0.135141,		0.0713256,		0.0108326,		0.00550749},	// a1
			{0.000227717,	-0.00016946,	-0.000328875,	-0.000420802,	-0.000228015,	-8.10546E-05,	-3.78851E-05},	// a2
			{-2.2543E-07,	3.27196E-07,	5.05918E-07,	5.73717E-07,	2.8487E-07,		1.15712E-07,	2.4808E-08},	// a3
			{1.33574E-10,	-2.8763E-10,	-3.92299E-10,	-4.03238E-10,	-1.74383E-10,	-8.13296E-11,	4.92183E-12},	// a4
			{-4.50458E-14,	1.22625E-13,	1.52279E-13,	1.42846E-13,	5.08071E-14,	3.04913E-14,	-8.65011E-15},	// a5
			{6.72086E-18,	-2.05736E-17,	-2.35576E-17,	-2.01726E-17,	-5.34955E-18,	-4.94989E-18,	1.9849E-18} };	// a6

	public static final double b_low_table[][] = {
			{120.0,			120.0,			120.0,			120.0,			120.0,			120.0,			120.0},			// bh
			{0.0687894,		0.15073,		0.0479451,		0.0223448,		-0.00326391,	-0.0514749,		-0.107255},		// b0
			{-0.00284077,	-0.00400889,	-0.00239453,	-0.0019798,		-0.00159869,	-0.000921059,	-0.000174343},	// b1
			{1.83922E-05,	2.43937E-05,	1.70335E-05,	1.54101E-05,	1.40443E-05,	1.15147E-05,	9.02759E-06},	// b2
			{9.19605E-09,	-9.92772E-09,	-1.31626E-09,	-2.3543E-09,	-3.02287E-09,	-1.22901E-09,	-3.16512E-10},	// b3
			{-4.16873E-11,	-1.82239E-11,	-1.74032E-11,	-1.24994E-11,	-9.2016E-12,	-8.13104E-12,	-6.14E-12} };	// b4

	public static final double b_high_table[][] = {
			{600.0,			660.0,			760.0,			800.0,			860.0,			900.0,			1000.0},		// bh
			{23.1584,		33.2732,		39.1961,		43.2469,		49.5738,		11.278,			-52.6184},		// b0
			{-0.0802147,	-0.111099,		-0.12352,		-0.126973,		-0.138613,		0.00143478,		0.214689},		// b1
			{0.000105824,	0.000141421,	0.000149015,	0.000142637,	0.000147851,	-3.69846E-05,	-0.000294882},	// b2
			{-6.15036E-08,	-7.94952E-08,	-7.9705E-08,	-7.09985E-08,	-6.96361E-08,	3.58318E-08,	1.71171E-07},	// b3
			{1.32453E-11,	1.65836E-11,	1.58772E-11,	1.31646E-11,	1.21595E-11,	-9.91225E-12,	-3.60582E-11} };// b4

	public static final double c_low_table[][] = {
			{120.0,			120.0,			120.0,			120.0,			120.0,			120.0,			120.0},			// ch
			{-1.04825,		-0.93106,		-0.820867,		-0.744047,		-0.722471,		-0.687482,		-0.739984},		// c0
			{0.0166305,		0.0141537,		0.0119916,		0.0104743,		0.00980317,		0.00916594,		0.00952854},	// c1
			{-9.24263E-05,	-7.29862E-05,	-5.79835E-05,	-4.78544E-05,	-4.25245E-05,	-3.80932E-05,	-3.62727E-05},	// c2
			{2.72382E-07,	2.00294E-07,	1.50707E-07,	1.18513E-07,	9.95544E-08,	8.51275E-08,	7.3887E-08},	// c3
			{-2.41355E-10,	-1.62006E-10,	-1.13026E-10,	-8.31498E-11,	-6.55175E-11,	-5.29972E-11,	-4.23907E-11} };// c4

	public static final double c_high_table[][] = {
			{640.0,			700.0,			760.0,			820.0,			860.0,			920.0,			980.0},			// ch
			{50.5034,		61.624,			53.2623,		18.2236,		-31.8442,		-48.7208,		-147.859},		// c0
			{-0.170541,		-0.192967,		-0.144342,		-0.00840024,	0.168327,		0.222996,		0.531652},		// c1
			{0.000217232,	0.000228061,	0.00014659,		-3.88E-05,		-2.62603E-04,	-3.21884E-04,	-6.71937E-04},	// c2 // in the last value -6.71937e-04 may be an error
			{-1.21902E-07,	-1.18715E-07,	-6.46443E-08,	4.31384E-08,	1.65454E-07,	1.91495E-07,	3.64787E-07},	// c3
			{2.54037E-11,	2.29638E-11,	1.04227E-11,	-1.23832E-11,	-3.69355E-11,	-4.08067E-11,	-7.26268E-11}};	// c4

	public static final double n_low_table[][] = {
			{2.058,			2.058,			2.058,			2.058,			2.058,			2.058,			2.058},			// n0
			{0.005887,		0.005887,		0.005887,		0.005887,		0.005887,		0.005887,		0.005887},		// n1
			{-0.000004012,	-0.000004012,	-0.000004012,	-0.000004012,	-0.000004012,	-0.000004012,	-0.000004012}};	// n2

	public static final double n_high_table[][] = {
			{2.058,			2.058,			2.058,			2.058,			2.058,			2.058,			2.058},			// n0
			{0.005887,		0.005887,		0.005887,		0.005887,		0.005887,		0.005887,		0.005887},		// n1
			{-0.000004012,	-0.000004012,	-0.000004012,	-0.000004012,	-0.000004012,	-0.000004012,	-0.000004012}};	// n2

	public static final double phi1_low_table[] = {
			0.5411,	0.5515,	0.5585,	0.5585,	0.5585,	0.5585,	0.5585 }; // phi1

	public static final double phi1_high_table[] = {
			0.5411,	0.5515,	0.5585,	0.5585,	0.5585,	0.5585,	0.5585 }; // phi1

	public static final double d_low_table[][] = {
			{120.0,			120.0,			120.0,			120.0,			120.0,			120.0,			120.0},			// dh
			{-0.351899,		-0.047813,		0.20981,		0.265174,		0.23047,		0.170074,		0.088141},		// d0
			{0.00577056,	0.00380813,		0.00262881,		0.00275836,		0.00338331,		0.00406131,		0.00468253},	// d1
			{9.95819E-07,	4.22771E-06,	4.24379E-06,	2.08668E-06,	-5.52305E-07,	-2.82114E-06,	-4.24609E-06},	// d2
			{-7.25324E-09,	-8.66826E-09,	-6.67328E-09,	-3.69543E-09,	-8.23607E-10,	1.38369E-09,	2.53509E-09},	// d3
			{2.9759E-12,	3.06712E-12,	2.13496E-12,	1.11862E-12,	2.21349E-13,	-4.27908E-13,	-7.29031E-13} };// d4

	public static final double d_high_table[][] = {
			{1500.0,		1500.0,			1500.0,			1500.0,			1500.0,			1500.0,			1500.0},		// dh
			{-0.351899,		-0.047813,		0.20981,		0.265174,		0.23047,		0.170074,		0.088141},		// d0
			{0.00577056,	0.00380813,		0.00262881,		0.00275836,		0.00338331,		0.00406131,		0.00468253},	// d1
			{9.95819E-07,	4.22771E-06,	4.24379E-06,	2.08668E-06,	-5.52305E-07,	-2.82114E-06,	-4.24609E-06},	// d2
			{-7.25324E-09,	-8.66826E-09,	-6.67328E-09,	-3.69543E-09,	-8.23607E-10,	1.38369E-09,	2.53509E-09},	// d3
			{2.9759E-12,	3.06712E-12,	2.13496E-12,	1.11862E-12,	2.21349E-13,	-4.27908E-13,	-7.29031E-13} };// d4

	public static final double e_low_table[][] = {
			{120.0,			120.0,			120.0,			120.0,			120.0,			120.0,			120.0},			// eh
			{-0.731596,		-0.752175,		-0.570476,		-0.949573,		-0.967598,		-1.02278,		-0.757903},		// e0
			{0.00597345,	0.00565925,		0.00295802,		0.00813121,		0.00841991,		0.00923633,		0.00606068},	// e1
			{-5.82037E-06,	1.8082E-06,		1.68896E-05,	-3.87813E-06,	-0.000003585,	-6.10128E-06,	7.85296E-06},	// e2
			{6.84634E-08,	3.33822E-08,	-4.7475E-09,	2.37694E-08,	1.74801E-08,	1.78211E-08,	-9.74891E-09},	// e3
			{-9.50483E-11,	-5.13965E-11,	-1.72711E-11,	-2.77469E-11,	-1.96221E-11,	-1.70073E-11,	1.58377E-12},	// e4
			{-0.2067,		-0.16971,		-0.14671,		-0.1315,		-0.120916,		-0.11363,		-0.10444},		// e5
			{0.097533,		0.07983,		0.068808,		0.061603,		0.056538,		0.053178,		0.048551},		// e6
			{-0.011817,		-0.0094393,		-0.0079836,		-0.0070866,		-0.0064324,		-0.0060436,		-0.0053567},	// e7
			{0.0016145,		0.0012622,		0.0010535,		0.00092813,		0.00083723,		0.00077982,		0.00068809}};	// e8

	public static final double e_high_table[][] = {
			{600.0,			700.0,			780.0,			800.0,			800.0,			900.0,			760.0},			// eh
			{38.6199,		51.249,			68.4746,		58.422,			7.20188,		21.5948,		-88.4076},		// e0
			{-0.132147,		-0.167373,		-0.215659,		-0.166664,		0.0216109,		-0.0202239,		0.338518},		// e1
			{0.000175411,	0.000211832,	0.000262273,	0.000185486,	-6.52882E-05,	-1.72029E-05,	-0.000445581},	// e2
			{-1.02417E-07,	-1.18221E-07,	-1.40972E-07,	-9.12345E-08,	5.37077E-08,	2.83017E-08,	2.51729E-07},	// e3
			{2.21446E-11,	2.45055E-11,	2.82285E-11,	1.67118E-11,	-1.4095E-11,	-8.94486E-12,	-5.203E-11},	// e4
			{-0.2067,		-0.16971,		-0.14671,		-0.1315,		-0.120916,		-0.11363,		-0.10444},		// e5
			{0.097533,		0.07983,		0.068808,		0.061603,		0.056538,		0.053178,		0.048551},		// e6
			{-0.011817,		-0.0094393,		-0.0079836,		-0.0070866,		-0.0064324,		-0.0060436,		-0.0053567},	// e7
			{0.0016145,		0.0012622,		0.0010535,		0.00092813,		0.00083723,		0.00077982,		0.00068809} };	// e8

	public static final double et_low_table[][] = {
			{-0.2061,		-0.169279,	-0.146377,	-0.13121,	-0.12067,	-0.113399,	-0.104243},		//et5
			{0.094449,		0.077599,	0.067052,	0.060105,	0.055232,	0.051994,	0.047573},		//et6
			{-0.0087953,	-0.0071375,	-0.0060951,	-0.0054388,	-0.004958,	-0.0046876,	-0.0041711},	//et7
			{0.00088385,	0.00069025,	0.00057456,	0.00050585,	0.00045512,	0.00042548,	0.00037068} };	//et8

	public static final double et_high_table[][] = {
			{-0.2061,		-0.169279,	-0.146377,	-0.13121,	-0.12067,	-0.113399,	-0.104243},		//et5
			{0.094449,		0.077599,	0.067052,	0.060105,	0.055232,	0.051994,	0.047573},		//et6
			{-0.0087953,	-0.0071375,	-0.0060951,	-0.0054388,	-0.004958,	-0.0046876,	-0.0041711},	//et7
			{0.00088385,	0.00069025,	0.00057456,	0.00050585,	0.00045512,	0.00042548,	0.00037068} };	//et8

	public static final double l_low_table[][] = {
			{ 120.0,		120.0,			120.0,			120.0,			120.0,			120.0,			120.0},			//lh
			{ -0.407768,	-0.902739,		-0.733037,		-1.31444,		-1.20026,		-1.52158,		-1.67664},		//l0
			{ 0.00148506,	0.00826803,		0.00523396,		0.0133124,		0.0114087,		0.015704,		0.0177194},		//l1
			{ 1.25357E-05,	-1.25448E-05,	6.35667E-06,	-2.55585E-05,	-1.47324E-05,	-3.02859E-05,	-3.69498E-05},	//l2
			{ 3.77311E-08,	6.12853E-08,	1.09065E-08,	5.43981E-08,	2.7804E-08,		4.57668E-08,	5.09134E-08},	//l3
			{ -7.78953E-11,	-7.07966E-11,	-2.61427E-11,	-4.33784E-11,	-2.2632E-11,	-2.82926E-11,	-2.82878E-11}};	//l4

	public static final double l_high_table[][] = {
			{640.0,			660.0,			740.0,			800.0,			860.0,			900.0,			900.0},			//lh
			{48.6536,		54.4867,		60.1267,		47.0996,		50.6174,		8.01942,		-15.5728},		//l0
			{-0.170291,		-0.178298,		-0.183144,		-0.12526,		-0.129047,		0.0185302,		0.0936704},		//l1
			{0.000226242,	0.000222725,	0.000212481,	0.000126352,	0.000124842,	-6.14733E-05,	-0.000149036},	//l2
			{-1.32032E-07,	-1.227E-07,		-1.08497E-07,	-5.51584E-08,	-5.24993E-08,	4.97674E-08,	9.42151E-08},	//l3
			{2.85193E-11,	2.51316E-11,	2.0571E-11,		8.75272E-12,	8.08272E-12,	-1.26162E-11,	-2.0961E-11} };	//l4

	// шкала опорных значений солнечной активности (по которой выстроены таблицы 2-3)
	//double F0_arr[7] = { 75.0, 100.0, 125.0, 150.0, 175.0, 200.0, 250.0 };

	public static final double H0 = 120.0;		// высота начала шкалы таблиц 4-9
	public static final double H_end = 1500.0;		// конечная высота шкалы таблиц 4-9
	public static final double H_step = 20.0;		// шаг шкалы таблиц 4-9 по высоте

	// Таблица 4

	public static final double table_rho_night[][] = {
			{1.62E-08,	1.62E-08,	1.63E-08,	1.64E-08,	1.65E-08,	1.66E-08,	1.68E-08},
			{3.50E-09,	3.57E-09,	3.63E-09,	3.69E-09,	3.76E-09,	3.85E-09,	4.01E-09},
			{1.06E-09,	1.11E-09,	1.17E-09,	1.22E-09,	1.27E-09,	1.33E-09,	1.44E-09},
			{4.01E-10,	4.44E-10,	4.83E-10,	5.21E-10,	5.58E-10,	5.95E-10,	6.73E-10},
			{1.78E-10,	2.08E-10,	2.36E-10,	2.64E-10,	2.91E-10,	3.18E-10,	3.74E-10},
			{8.76E-11,	1.08E-10,	1.29E-10,	1.49E-10,	1.69E-10,	1.89E-10,	2.31E-10},
			{4.60E-11,	6.03E-11,	7.48E-11,	8.94E-11,	1.04E-10,	1.19E-10,	1.51E-10},
			{2.51E-11,	3.50E-11,	4.51E-11,	5.56E-11,	6.66E-11,	7.79E-11,	1.02E-10},
			{1.41E-11,	2.07E-11,	2.78E-11,	3.53E-11,	4.33E-11,	5.17E-11,	6.93E-11},
			{8.10E-12,	1.25E-11,	1.74E-11,	2.27E-11,	2.84E-11,	3.46E-11,	4.76E-11},
			{4.72E-12,	7.67E-12,	1.10E-11,	1.47E-11,	1.89E-11,	2.34E-11,	3.30E-11},
			{2.79E-12,	4.76E-12,	7.07E-12,	9.69E-12,	1.27E-11,	1.59E-11,	2.30E-11},
			{1.68E-12,	3.00E-12,	4.60E-12,	6.47E-12,	8.65E-12,	1.10E-11,	1.63E-11},
			{1.03E-12,	1.92E-12,	3.04E-12,	4.39E-12,	5.98E-12,	7.74E-12,	1.17E-11},
			{6.36E-13,	1.25E-12,	2.04E-12,	3.02E-12,	4.21E-12,	5.53E-12,	8.53E-12},
			{3.99E-13,	8.20E-13,	1.39E-12,	2.11E-12,	3.00E-12,	4.02E-12,	6.31E-12},
			{2.53E-13,	5.46E-13,	9.56E-13,	1.48E-12,	2.16E-12,	2.95E-12,	4.71E-12},
			{1.62E-13,	3.66E-13,	6.61E-13,	1.05E-12,	1.56E-12,	2.19E-12,	3.55E-12},
			{1.05E-13,	2.46E-13,	4.59E-13,	7.49E-13,	1.13E-12,	1.63E-12,	2.67E-12},
			{6.96E-14,	1.66E-13,	3.19E-13,	5.35E-13,	8.25E-13,	1.20E-12,	2.02E-12},
			{4.79E-14,	1.13E-13,	2.23E-13,	3.95E-13,	6.14E-13,	8.71E-13,	1.56E-12},
			{3.40E-14,	7.87E-14,	1.58E-13,	2.86E-13,	4.51E-13,	6.43E-13,	1.18E-12},
			{2.48E-14,	5.6E-14,	1.13E-13,	2.07E-13,	3.31E-13,	4.76E-13,	8.98E-13},
			{1.85E-14,	4.06E-14,	8.22E-14,	1.50E-13,	2.44E-13,	3.55E-13,	6.83E-13},
			{1.42E-14,	3.01E-14,	6.04E-14,	1.10E-13,	1.81E-13,	2.66E-13,	5.20E-13},
			{1.11E-14,	2.26E-14,	4.51E-14,	8.10E-14,	1.35E-13,	2.00E-13,	3.97E-13},
			{8.81E-15,	1.74E-14,	3.41E-14,	6.03E-14,	1.01E-13,	1.52E-13,	3.03E-13},
			{7.14E-15,	1.35E-14,	2.62E-14,	4.54E-14,	7.65E-14,	1.16E-13,	2.33E-13},
			{5.88E-15,	1.07E-14,	2.04E-14,	3.45E-14,	5.84E-14,	8.94E-14,	1.79E-13},
			{4.91E-15,	8.66E-15,	1.61E-14,	2.66E-14,	4.50E-14,	6.94E-14,	1.39E-13},
			{4.16E-15,	7.08E-15,	1.29E-14,	2.08E-14,	3.50E-14,	5.42E-14,	1.08E-13},
			{3.56E-15,	5.87E-15,	1.05E-14,	1.64E-14,	2.75E-14,	4.27E-14,	8.45E-14},
			{3.09E-15,	4.93E-15,	8.64E-15,	1.31E-14,	2.19E-14,	3.39E-14,	6.64E-14},
			{2.70E-15,	4.19E-15,	7.21E-15,	1.07E-14,	1.76E-14,	2.71E-14,	5.26E-14},
			{2.39E-15,	3.60E-15,	6.08E-15,	8.75E-15,	1.43E-14,	2.19E-14,	4.19E-14},
			{2.13E-15,	3.13E-15,	5.19E-15,	7.27E-15,	1.17E-14,	1.78E-14,	3.36E-14},
			{1.91E-15,	2.74E-15,	4.47E-15,	6.11E-15,	9.71E-15,	1.46E-14,	2.71E-14},
			{1.73E-15,	2.43E-15,	3.89E-15,	5.20E-15,	8.13E-15,	1.21E-14,	2.21E-14},
			{1.57E-15,	2.16E-15,	3.41E-15,	4.47E-15,	6.88E-15,	1.00E-14,	1.81E-14},
			{1.43E-15,	1.94E-15,	3.02E-15,	3.87E-15,	5.88E-15,	8.43E-15,	1.49E-14},
			{1.32E-15,	1.75E-15,	2.69E-15,	3.39E-15,	5.07E-15,	7.13E-15,	1.24E-14},
			{1.21E-15,	1.59E-15,	2.41E-15,	2.99E-15,	4.41E-15,	6.08E-15,	1.04E-14},
			{1.12E-15,	1.45E-15,	2.17E-15,	2.66E-15,	3.86E-15,	5.22E-15,	8.79E-15},
			{1.04E-15,	1.32E-15,	1.97E-15,	2.38E-15,	3.41E-15,	4.52E-15,	7.48E-15},
			{9.71E-16,	1.22E-15,	1.79E-15,	2.15E-15,	3.03E-15,	3.94E-15,	6.41E-15},
			{9.06E-16,	1.12E-15,	1.63E-15,	1.95E-15,	2.72E-15,	3.46E-15,	5.54E-15},
			{8.48E-16,	1.04E-15,	1.50E-15,	1.77E-15,	2.45E-15,	3.05E-15,	4.82E-15},
			{7.95E-16,	9.60E-16,	1.37E-15,	1.62E-15,	2.21E-15,	2.72E-15,	4.23E-15},
			{7.47E-16,	8.91E-16,	1.26E-15,	1.49E-15,	2.02E-15,	2.43E-15,	3.73E-15},
			{7.03E-16,	8.29E-16,	1.16E-15,	1.37E-15,	1.84E-15,	2.19E-15,	3.32E-15},
			{6.62E-16,	7.73E-16,	1.07E-15,	1.26E-15,	1.69E-15,	1.99E-15,	2.97E-15},
			{6.24E-16,	7.22E-16,	9.94E-16,	1.17E-15,	1.56E-15,	1.81E-15,	2.67E-15},
			{5.89E-16,	6.75E-16,	9.20E-16,	1.08E-15,	1.44E-15,	1.66E-15,	2.42E-15},
			{5.56E-16,	6.33E-16,	8.53E-16,	1.00E-15,	1.33E-15,	1.53E-15,	2.21E-15},
			{5.26E-16,	5.95E-16,	7.92E-16,	9.30E-16,	1.23E-15,	1.41E-15,	2.02E-15},
			{4.98E-16,	5.59E-16,	7.36E-16,	8.65E-16,	1.15E-15,	1.32E-15,	1.86E-15},
			{4.71E-16,	5.27E-16,	6.85E-16,	8.06E-16,	1.07E-15,	1.23E-15,	1.72E-15},
			{4.46E-16,	4.98E-16,	6.38E-16,	7.51E-16,	9.94E-16,	1.15E-15,	1.59E-15},
			{4.23E-16,	4.72E-16,	5.96E-16,	7.01E-16,	9.28E-16,	1.08E-15,	1.49E-15},
			{4.02E-16,	4.47E-16,	5.58E-16,	6.55E-16,	8.68E-16,	1.02E-15,	1.39E-15},
			{3.82E-16,	4.25E-16,	5.23E-16,	6.13E-16,	8.13E-16,	9.68E-16,	1.30E-15},
			{3.63E-16,	4.05E-16,	4.91E-16,	5.75E-16,	7.62E-16,	9.18E-16,	1.23E-15},
			{3.46E-16,	3.87E-16,	4.63E-16,	5.41E-16,	7.16E-16,	8.73E-16,	1.16E-15},
			{3.3E-16,	3.70E-16,	4.37E-16,	5.09E-16,	6.74E-16,	8.30E-16,	1.09E-15},
			{3.15E-16,	3.54E-16,	4.14E-16,	4.81E-16,	6.36E-16,	7.90E-16,	1.03E-15},
			{3.02E-16,	3.40E-16,	3.93E-16,	4.56E-16,	6.02E-16,	7.52E-16,	9.76E-16},
			{2.90E-16,	3.26E-16,	3.74E-16,	4.34E-16,	5.72E-16,	7.16E-16,	9.24E-16},
			{2.80E-16,	3.13E-16,	3.58E-16,	4.14E-16,	5.45E-16,	6.80E-16,	8.75E-16},
			{2.71E-16,	3.00E-16,	3.42E-16,	3.98E-16,	5.22E-16,	6.44E-16,	8.29E-16},
			{2.63E-16,	2.88E-16,	3.29E-16,	3.83E-16,	5.03E-16,	6.08E-16,	7.85E-16}
	};

	// Таблица 5

	public static final double table_K0[][] = {
			{0.000,	0.000,	0.000,	0.000,	0.000,	0.000,	0.000},
			{0.119,	0.150,	0.144,	0.181,	0.176,	0.198,	0.209},
			{0.254,	0.304,	0.295,	0.356,	0.347,	0.385,	0.403},
			{0.404,	0.462,	0.451,	0.525,	0.514,	0.561,	0.583},
			{0.568,	0.626,	0.613,	0.691,	0.678,	0.729,	0.752},
			{0.745,	0.796,	0.781,	0.855,	0.840,	0.889,	0.909},
			{0.934,	0.971,	0.953,	1.016,	0.999,	1.042,	1.058},
			{1.133,	1.153,	1.130,	1.177,	1.155,	1.189,	1.198},
			{1.340,	1.339,	1.310,	1.337,	1.310,	1.332,	1.332},
			{1.554,	1.530,	1.492,	1.496,	1.464,	1.470,	1.460},
			{1.771,	1.724,	1.676,	1.656,	1.616,	1.605,	1.582},
			{1.988,	1.921,	1.861,	1.816,	1.766,	1.737,	1.700},
			{2.204,	2.118,	2.045,	1.975,	1.915,	1.867,	1.814},
			{2.413,	2.314,	2.227,	2.134,	2.061,	1.994,	1.925},
			{2.613,	2.507,	2.406,	2.292,	2.206,	2.119,	2.034},
			{2.799,	2.694,	2.581,	2.449,	2.348,	2.242,	2.140},
			{2.967,	2.874,	2.750,	2.603,	2.488,	2.363,	2.243},
			{3.113,	3.041,	2.911,	2.754,	2.623,	2.482,	2.345},
			{3.231,	3.195,	3.062,	2.900,	2.755,	2.598,	2.445},
			{3.317,	3.331,	3.203,	3.041,	2.882,	2.712,	2.542},
			{3.364,	3.445,	3.330,	3.174,	3.003,	2.822,	2.637},
			{3.367,	3.534,	3.441,	3.299,	3.118,	2.928,	2.729},
			{3.321,	3.593,	3.536,	3.412,	3.226,	3.030,	2.818},
			{3.217,	3.618,	3.611,	3.514,	3.325,	3.126,	2.904},
			{3.051,	3.604,	3.663,	3.600,	3.414,	3.217,	2.985},
			{2.814,	3.546,	3.692,	3.669,	3.492,	3.300,	3.060},
			{2.500,	3.438,	3.693,	3.719,	3.559,	3.375,	3.130},
			{2.265,	3.275,	3.665,	3.747,	3.611,	3.440,	3.193},
			{2.053,	3.025,	3.605,	3.749,	3.649,	3.494,	3.248},
			{1.869,	2.761,	3.510,	3.724,	3.670,	3.536,	3.293},
			{1.711,	2.529,	3.376,	3.667,	3.672,	3.564,	3.328},
			{1.578,	2.326,	3.201,	3.577,	3.655,	3.577,	3.351},
			{1.466,	2.148,	2.902,	3.448,	3.616,	3.572,	3.361},
			{1.373,	1.995,	2.675,	3.278,	3.553,	3.548,	3.355},
			{1.297,	1.864,	2.475,	3.062,	3.464,	3.503,	3.332},
			{1.236,	1.752,	2.300,	2.890,	3.347,	3.434,	3.291},
			{1.189,	1.659,	2.147,	2.700,	3.200,	3.340,	3.229},
			{1.152,	1.581,	2.016,	2.530,	3.020,	3.218,	3.144},
			{1.126,	1.517,	1.904,	2.378,	2.804,	3.066,	3.035},
			{1.108,	1.466,	1.809,	2.243,	2.628,	2.882,	2.898},
			{1.096,	1.426,	1.730,	2.124,	2.470,	2.751,	2.808},
			{1.090,	1.395,	1.664,	2.020,	2.329,	2.606,	2.678},
			{1.088,	1.372,	1.612,	1.929,	2.204,	2.470,	2.552},
			{1.089,	1.356,	1.570,	1.852,	2.093,	2.344,	2.431},
			{1.092,	1.345,	1.538,	1.786,	1.996,	2.228,	2.316},
			{1.096,	1.339,	1.514,	1.731,	1.911,	2.121,	2.207},
			{1.100,	1.336,	1.497,	1.685,	1.839,	2.024,	2.105},
			{1.103,	1.335,	1.486,	1.649,	1.777,	1.936,	2.010},
			{1.106,	1.336,	1.481,	1.620,	1.725,	1.858,	1.923},
			{1.107,	1.338,	1.479,	1.599,	1.682,	1.789,	1.843},
			{1.106,	1.340,	1.480,	1.583,	1.647,	1.729,	1.770},
			{1.103,	1.341,	1.483,	1.574,	1.620,	1.677,	1.706},
			{1.097,	1.342,	1.488,	1.569,	1.599,	1.634,	1.649},
			{1.089,	1.342,	1.494,	1.568,	1.585,	1.599,	1.601},
			{1.079,	1.340,	1.500,	1.570,	1.575,	1.571,	1.559},
			{1.067,	1.337,	1.505,	1.576,	1.570,	1.550,	1.525},
			{1.053,	1.333,	1.510,	1.583,	1.569,	1.536,	1.498},
			{1.037,	1.327,	1.514,	1.592,	1.571,	1.527,	1.477},
			{1.021,	1.319,	1.516,	1.602,	1.576,	1.524,	1.462},
			{1.004,	1.311,	1.517,	1.612,	1.583,	1.525,	1.452},
			{0.988,	1.302,	1.517,	1.622,	1.592,	1.529,	1.447},
			{0.972,	1.292,	1.514,	1.632,	1.602,	1.537,	1.446},
			{0.959,	1.283,	1.510,	1.641,	1.613,	1.547,	1.448},
			{0.950,	1.274,	1.505,	1.649,	1.624,	1.558,	1.452},
			{0.944,	1.267,	1.498,	1.655,	1.634,	1.569,	1.458},
			{0.945,	1.263,	1.490,	1.660,	1.645,	1.580,	1.464},
			{0.952,	1.261,	1.481,	1.662,	1.654,	1.589,	1.468},
			{0.968,	1.264,	1.472,	1.661,	1.663,	1.595,	1.470},
			{0.995,	1.272,	1.464,	1.658,	1.670,	1.598,	1.469},
			{1.033,	1.287,	1.456,	1.653,	1.675,	1.595,	1.463}
	};

	// Таблица 6

	public static final double table_K1[][] = {
			{0.037,	0.029,	0.020,	0.011,	0.000,	0.000,	0.000},
			{0.123,	0.107,	0.092,	0.078,	0.065,	0.062,	0.070},
			{0.204,	0.179,	0.157,	0.138,	0.122,	0.118,	0.131},
			{0.286,	0.250,	0.219,	0.195,	0.176,	0.169,	0.186},
			{0.374,	0.323,	0.283,	0.252,	0.229,	0.218,	0.238},
			{0.472,	0.403,	0.351,	0.311,	0.283,	0.268,	0.288},
			{0.584,	0.493,	0.426,	0.376,	0.340,	0.319,	0.338},
			{0.712,	0.595,	0.510,	0.447,	0.402,	0.375,	0.390},
			{0.858,	0.711,	0.604,	0.527,	0.471,	0.435,	0.446},
			{1.022,	0.842,	0.712,	0.618,	0.549,	0.503,	0.506},
			{1.204,	0.989,	0.832,	0.719,	0.635,	0.579,	0.571},
			{1.402,	1.151,	0.966,	0.832,	0.732,	0.663,	0.644},
			{1.615,	1.329,	1.114,	0.958,	0.840,	0.757,	0.725},
			{1.839,	1.521,	1.276,	1.095,	0.959,	0.861,	0.814},
			{2.070,	1.724,	1.450,	1.245,	1.089,	0.975,	0.911},
			{2.303,	1.937,	1.636,	1.407,	1.231,	1.100,	1.019},
			{2.532,	2.156,	1.831,	1.579,	1.383,	1.236,	1.135},
			{2.750,	2.378,	2.034,	1.761,	1.546,	1.381,	1.262},
			{2.951,	2.598,	2.243,	1.951,	1.717,	1.537,	1.398},
			{3.123,	2.811,	2.453,	2.147,	1.897,	1.701,	1.543},
			{3.260,	3.011,	2.663,	2.347,	2.084,	1.873,	1.696},
			{3.349,	3.193,	2.867,	2.549,	2.276,	2.052,	1.858},
			{3.379,	3.349,	3.062,	2.750,	2.472,	2.237,	2.028},
			{3.337,	3.472,	3.243,	2.946,	2.668,	2.426,	2.204},
			{3.211,	3.554,	3.405,	3.136,	2.863,	2.618,	2.385},
			{2.987,	3.585,	3.542,	3.313,	3.055,	2.810,	2.570},
			{2.648,	3.558,	3.648,	3.476,	3.239,	3.000,	2.758},
			{2.347,	3.461,	3.717,	3.618,	3.414,	3.186,	2.947},
			{2.085,	3.284,	3.742,	3.736,	3.575,	3.366,	3.136},
			{1.855,	3.016,	3.716,	3.825,	3.719,	3.537,	3.322},
			{1.654,	2.776,	3.631,	3.879,	3.843,	3.696,	3.503},
			{1.479,	2.495,	3.479,	3.892,	3.941,	3.839,	3.677},
			{1.329,	2.245,	3.250,	3.860,	4.010,	3.964,	3.843},
			{1.200,	2.026,	3.042,	3.774,	4.044,	4.067,	3.996},
			{1.091,	1.833,	2.778,	3.629,	4.040,	4.143,	4.135},
			{0.999,	1.666,	2.539,	3.418,	3.992,	4.190,	4.257},
			{0.924,	1.522,	2.323,	3.193,	3.894,	4.203,	4.358},
			{0.862,	1.398,	2.130,	2.968,	3.741,	4.177,	4.435},
			{0.813,	1.294,	1.958,	2.756,	3.527,	4.109,	4.486},
			{0.775,	1.206,	1.805,	2.559,	3.326,	3.993,	4.506},
			{0.746,	1.134,	1.670,	2.375,	3.128,	3.824,	4.492},
			{0.725,	1.076,	1.553,	2.206,	2.935,	3.672,	4.439},
			{0.711,	1.029,	1.451,	2.050,	2.748,	3.471,	4.345},
			{0.701,	0.994,	1.363,	1.907,	2.570,	3.273,	4.204},
			{0.696,	0.967,	1.289,	1.779,	2.400,	3.080,	4.047},
			{0.694,	0.948,	1.227,	1.663,	2.240,	2.893,	3.875},
			{0.694,	0.935,	1.175,	1.560,	2.090,	2.713,	3.696},
			{0.696,	0.928,	1.134,	1.469,	1.951,	2.542,	3.512},
			{0.699,	0.925,	1.102,	1.390,	1.824,	2.381,	3.327},
			{0.701,	0.926,	1.078,	1.322,	1.709,	2.230,	3.144},
			{0.703,	0.929,	1.061,	1.266,	1.606,	2.090,	2.964},
			{0.704,	0.933,	1.051,	1.220,	1.516,	1.962,	2.790},
			{0.704,	0.939,	1.046,	1.183,	1.438,	1.845,	2.624},
			{0.702,	0.944,	1.045,	1.156,	1.371,	1.740,	2.466},
			{0.699,	0.950,	1.049,	1.137,	1.316,	1.648,	2.318},
			{0.694,	0.954,	1.055,	1.125,	1.273,	1.567,	2.181},
			{0.687,	0.958,	1.064,	1.121,	1.239,	1.499,	2.057},
			{0.679,	0.960,	1.075,	1.122,	1.216,	1.441,	1.944},
			{0.669,	0.961,	1.087,	1.128,	1.201,	1.394,	1.843},
			{0.659,	0.960,	1.100,	1.139,	1.194,	1.357,	1.754},
			{0.648,	0.957,	1.112,	1.152,	1.194,	1.328,	1.676},
			{0.637,	0.953,	1.125,	1.168,	1.198,	1.308,	1.609},
			{0.627,	0.948,	1.136,	1.184,	1.207,	1.294,	1.552},
			{0.619,	0.941,	1.147,	1.201,	1.217,	1.285,	1.503},
			{0.612,	0.934,	1.156,	1.216,	1.227,	1.280,	1.461},
			{0.609,	0.926,	1.163,	1.228,	1.236,	1.277,	1.423},
			{0.610,	0.918,	1.168,	1.237,	1.242,	1.274,	1.389},
			{0.617,	0.911,	1.170,	1.240,	1.241,	1.270,	1.354},
			{0.630,	0.905,	1.170,	1.237,	1.232,	1.261,	1.317},
			{0.651,	0.902,	1.167,	1.225,	1.212,	1.246,	1.275}
	};

	// Таблица 7

	public static final double table_K2[][] = {
			{0.343,	0.456,	0.575,	0.620,	0.627,	0.619,	0.593},
			{0.457,	0.546,	0.644,	0.683,	0.691,	0.687,	0.667},
			{0.569,	0.636,	0.713,	0.746,	0.754,	0.753,	0.739},
			{0.680,	0.727,	0.784,	0.809,	0.817,	0.817,	0.807},
			{0.789,	0.818,	0.855,	0.873,	0.879,	0.880,	0.874},
			{0.896,	0.909,	0.927,	0.936,	0.940,	0.941,	0.938},
			{1.000,	1.000,	1.000,	1.000,	1.000,	1.000,	1.000},
			{1.102,	1.090,	1.073,	1.064,	1.059,	1.058,	1.060},
			{1.201,	1.178,	1.145,	1.127,	1.118,	1.114,	1.118},
			{1.297,	1.266,	1.218,	1.190,	1.175,	1.168,	1.173},
			{1.390,	1.352,	1.289,	1.252,	1.232,	1.222,	1.227},
			{1.480,	1.436,	1.360,	1.314,	1.288,	1.274,	1.279},
			{1.566,	1.518,	1.431,	1.375,	1.342,	1.324,	1.330},
			{1.649,	1.598,	1.500,	1.435,	1.396,	1.373,	1.378},
			{1.728,	1.676,	1.568,	1.495,	1.448,	1.421,	1.425},
			{1.803,	1.751,	1.635,	1.553,	1.500,	1.467,	1.471},
			{1.874,	1.823,	1.700,	1.610,	1.550,	1.513,	1.515},
			{1.941,	1.892,	1.763,	1.666,	1.600,	1.557,	1.558},
			{2.003,	1.958,	1.825,	1.721,	1.648,	1.600,	1.599},
			{2.062,	2.021,	1.884,	1.774,	1.695,	1.642,	1.639},
			{2.116,	2.081,	1.942,	1.826,	1.741,	1.683,	1.678},
			{2.166,	2.137,	1.998,	1.876,	1.786,	1.722,	1.716},
			{2.211,	2.190,	2.051,	1.925,	1.829,	1.761,	1.752},
			{2.252,	2.239,	2.102,	1.973,	1.871,	1.798,	1.788},
			{2.288,	2.284,	2.150,	2.018,	1.912,	1.835,	1.822},
			{2.320,	2.326,	2.196,	2.062,	1.952,	1.871,	1.856},
			{2.347,	2.363,	2.239,	2.104,	1.991,	1.905,	1.888},
			{2.370,	2.397,	2.280,	2.144,	2.028,	1.939,	1.920},
			{2.388,	2.427,	2.318,	2.183,	2.064,	1.971,	1.950},
			{2.402,	2.453,	2.353,	2.220,	2.099,	2.003,	1.980},
			{2.412,	2.475,	2.385,	2.254,	2.132,	2.034,	2.009},
			{2.417,	2.492,	2.415,	2.287,	2.164,	2.064,	2.037},
			{2.418,	2.506,	2.442,	2.318,	2.195,	2.093,	2.064},
			{2.414,	2.516,	4.466,	2.347,	2.225,	2.121,	2.090},
			{2.407,	2.523,	2.487,	2.373,	2.253,	2.148,	2.116},
			{2.396,	2.525,	2.505,	2.398,	2.279,	2.174,	2.141},
			{2.381,	2.523,	2.520,	2.421,	2.305,	2.200,	2.165},
			{2.362,	2.518,	2.533,	2.442,	2.329,	2.224,	2.188},
			{2.339,	2.509,	2.542,	2.461,	2.352,	2.247,	2.211},
			{2.313,	2.497,	2.549,	2.478,	2.373,	2.270,	2.233},
			{2.284,	2.481,	2.553,	2.493,	2.393,	2.292,	2.254},
			{2.251,	2.462,	2.555,	2.506,	2.412,	2.312,	2.274},
			{2.216,	2.440,	2.554,	2.517,	2.429,	2.332,	2.294},
			{2.178,	2.415,	2.550,	2.526,	2.445,	2.351,	2.313},
			{2.137,	2.387,	2.544,	2.533,	2.459,	2.369,	2.331},
			{2.094,	2.356,	2.536,	2.539,	2.472,	2.386,	2.348},
			{2.049,	2.323,	2.525,	2.543,	2.484,	2.402,	2.364},
			{2.002,	2.287,	2.512,	2.545,	2.495,	2.417,	2.380},
			{1.954,	2.249,	2.497,	2.545,	2.504,	2.431,	2.394},
			{1.904,	2.210,	2.480,	2.543,	2.512,	2.444,	2.408},
			{1.853,	2.168,	2.461,	2.540,	2.518,	2.455,	2.421},
			{1.801,	2.126,	2.441,	2.536,	2.523,	2.466,	2.433},
			{1.749,	2.082,	2.419,	2.530,	2.527,	2.476,	2.443},
			{1.696,	2.037,	2.396,	2.523,	2.530,	2.484,	2.453},
			{1.644,	1.991,	2.371,	2.514,	2.531,	2.491,	2.462},
			{1.592,	1.945,	2.345,	2.504,	2.531,	2.497,	2.469},
			{1.541,	1.899,	2.319,	2.493,	2.530,	2.502,	2.476},
			{1.491,	1.853,	2.292,	2.481,	2.527,	2.505,	2.481},
			{1.443,	1.808,	2.264,	2.468,	2.523,	2.508,	2.484},
			{1.397,	1.763,	2.236,	2.454,	2.518,	2.508,	2.487},
			{1.353,	1.720,	2.208,	2.439,	2.512,	2.508,	2.488},
			{1.312,	1.679,	2.179,	2.423,	2.504,	2.506,	2.488},
			{1.273,	1.639,	2.152,	2.407,	2.496,	2.502,	2.486},
			{1.239,	1.601,	2.125,	2.391,	2.486,	2.498,	2.482},
			{1.208,	1.567,	2.098,	2.374,	2.475,	2.491,	2.477},
			{1.182,	1.535,	2.073,	2.357,	2.463,	2.483,	2.470},
			{1.160,	1.507,	2.049,	2.340,	2.450,	2.473,	2.461},
			{1.144,	1.483,	2.026,	2.322,	2.435,	2.462,	2.451},
			{1.134,	1.463,	2.006,	2.305,	2.420,	2.448,	2.438},
			{1.130,	1.449,	1.987,	2.289,	2.404,	2.433,	2.423}
	};

	// Таблица 8

	public static final double table_K3[][] = {
			{0.000,	0.000,	0.000,	0.000,	0.000,	0.000,	0.000},
			{0.041,	0.033,	0.036,	0.036,	0.036,	0.039,	0.042},
			{0.095,	0.081,	0.084,	0.082,	0.082,	0.086,	0.091},
			{0.163,	0.142,	0.143,	0.138,	0.137,	0.140,	0.146},
			{0.243,	0.216,	0.212,	0.204,	0.200,	0.202,	0.207},
			{0.334,	0.301,	0.291,	0.278,	0.271,	0.271,	0.274},
			{0.435,	0.396,	0.378,	0.361,	0.350,	0.347,	0.346},
			{0.545,	0.500,	0.474,	0.451,	0.435,	0.429,	0.424},
			{0.661,	0.611,	0.577,	0.548,	0.527,	0.516,	0.507},
			{0.782,	0.728,	0.686,	0.651,	0.625,	0.609,	0.595},
			{0.907,	0.849,	0.800,	0.759,	0.728,	0.707,	0.687},
			{1.033,	0.974,	0.919,	0.871,	0.835,	0.810,	0.783},
			{1.159,	1.100,	1.040,	0.987,	0.946,	0.915,	0.882},
			{1.280,	1.225,	1.163,	1.105,	1.059,	1.024,	0.985},
			{1.397,	1.348,	1.286,	1.225,	1.175,	1.136,	1.090},
			{1.504,	1.467,	1.408,	1.346,	1.292,	1.249,	1.197},
			{1.600,	1.581,	1.528,	1.466,	1.410,	1.363,	1.307},
			{1.682,	1.686,	1.643,	1.584,	1.527,	1.478,	1.417},
			{1.747,	1.781,	1.754,	1.699,	1.642,	1.592,	1.528},
			{1.791,	1.865,	1.857,	1.809,	1.756,	1.705,	1.639},
			{1.810,	1.934,	1.951,	1.915,	1.865,	1.816,	1.750},
			{1.801,	1.986,	2.035,	2.013,	1.970,	1.924,	1.859},
			{1.761,	2.020,	2.106,	2.104,	2.070,	2.028,	1.967},
			{1.685,	2.032,	2.163,	2.184,	2.163,	2.128,	2.072},
			{1.569,	2.021,	2.204,	2.254,	2.248,	2.222,	2.174},
			{1.403,	1.983,	2.226,	2.310,	2.324,	2.309,	2.272},
			{1.266,	1.917,	2.228,	2.353,	2.390,	2.389,	2.366},
			{1.145,	1.819,	2.207,	2.380,	2.444,	2.460,	2.454},
			{1.039,	1.669,	2.161,	2.389,	2.486,	2.522,	2.536},
			{0.946,	1.515,	2.088,	2.379,	2.513,	2.572,	2.611},
			{0.866,	1.380,	1.986,	2.348,	2.525,	2.611,	2.679},
			{0.798,	1.262,	1.852,	2.294,	2.520,	2.636,	2.738},
			{0.739,	1.159,	1.683,	2.215,	2.497,	2.647,	2.787},
			{0.690,	1.070,	1.564,	2.110,	2.454,	2.643,	2.826},
			{0.649,	0.995,	1.444,	1.976,	2.389,	2.621,	2.854},
			{0.616,	0.930,	1.339,	1.844,	2.302,	2.582,	2.869},
			{0.588,	0.876,	1.248,	1.707,	2.191,	2.523,	2.872},
			{0.567,	0.831,	1.169,	1.587,	2.053,	2.443,	2.860},
			{0.550,	0.794,	1.100,	1.480,	1.927,	2.341,	2.832},
			{0.537,	0.764,	1.042,	1.387,	1.795,	2.216,	2.789},
			{0.527,	0.739,	0.993,	1.305,	1.677,	2.095,	2.728},
			{0.520,	0.720,	0.951,	1.234,	1.574,	1.969,	2.649},
			{0.515,	0.705,	0.916,	1.173,	1.483,	1.853,	2.550},
			{0.512,	0.693,	0.887,	1.121,	1.404,	1.746,	2.431},
			{0.509,	0.684,	0.863,	1.077,	1.335,	1.648,	2.289},
			{0.508,	0.676,	0.843,	1.040,	1.276,	1.558,	2.187},
			{0.506,	0.670,	0.827,	1.008,	1.226,	1.478,	2.075},
			{0.505,	0.665,	0.813,	0.982,	1.183,	1.405,	1.967},
			{0.503,	0.660,	0.801,	0.960,	1.147,	1.341,	1.865},
			{0.500,	0.656,	0.791,	0.943,	1.116,	1.284,	1.768},
			{0.497,	0.650,	0.781,	0.928,	1.091,	1.235,	1.678},
			{0.493,	0.644,	0.773,	0.916,	1.070,	1.193,	1.595},
			{0.488,	0.638,	0.764,	0.906,	1.053,	1.158,	1.519},
			{0.482,	0.630,	0.755,	0.897,	1.038,	1.129,	1.452},
			{0.475,	0.621,	0.746,	0.889,	1.026,	1.105,	1.392},
			{0.466,	0.610,	0.737,	0.882,	1.016,	1.087,	1.339},
			{0.458,	0.599,	0.726,	0.876,	1.007,	1.073,	1.295},
			{0.448,	0.587,	0.715,	0.869,	0.999,	1.063,	1.258},
			{0.438,	0.573,	0.703,	0.862,	0.991,	1.056,	1.227},
			{0.428,	0.559,	0.690,	0.854,	0.983,	1.051,	1.204},
			{0.419,	0.545,	0.677,	0.846,	0.975,	1.049,	1.185},
			{0.409,	0.531,	0.663,	0.837,	0.966,	1.047,	1.172},
			{0.401,	0.517,	0.649,	0.828,	0.957,	1.046,	1.162},
			{0.395,	0.504,	0.635,	0.817,	0.946,	1.044,	1.155},
			{0.390,	0.492,	0.621,	0.806,	0.934,	1.040,	1.150},
			{0.388,	0.483,	0.608,	0.795,	0.921,	1.034,	1.144},
			{0.389,	0.476,	0.596,	0.783,	0.906,	1.025,	1.137},
			{0.395,	0.473,	0.586,	0.771,	0.890,	1.011,	1.126},
			{0.405,	0.474,	0.578,	0.758,	0.873,	0.992,	1.111},
			{0.420,	0.480,	0.574,	0.747,	0.855,	0.966,	1.088}
	};

	// Таблица 9

	public static final double table_K4[][] = {
			{0.000,	0.000,	0.016,	0.006,	0.017,	0.025,	0.066},
			{0.142,	0.147,	0.155,	0.167,	0.181,	0.193,	0.218},
			{0.293,	0.303,	0.304,	0.331,	0.347,	0.361,	0.374},
			{0.455,	0.466,	0.463,	0.498,	0.513,	0.528,	0.532},
			{0.626,	0.637,	0.631,	0.667,	0.681,	0.696,	0.693},
			{0.807,	0.815,	0.807,	0.840,	0.851,	0.864,	0.855},
			{0.998,	1.001,	0.989,	1.015,	1.023,	1.032,	1.019},
			{1.197,	1.193,	1.178,	1.193,	1.197,	1.202,	1.185},
			{1.403,	1.391,	1.372,	1.374,	1.372,	1.372,	1.350},
			{1.615,	1.593,	1.569,	1.558,	1.549,	1.542,	1.517},
			{1.831,	1.799,	1.769,	1.743,	1.727,	1.714,	1.683},
			{2.047,	2.006,	1.970,	1.930,	1.906,	1.885,	1.849},
			{2.262,	2.214,	2.172,	2.118,	2.005,	2.057,	2.013},
			{2.473,	2.420,	2.372,	2.306,	2.264,	2.229,	2.177},
			{2.675,	2.622,	2.569,	2.493,	2.443,	2.401,	2.339},
			{2.865,	2.818,	2.762,	2.679,	2.621,	2.571,	2.500},
			{3.039,	3.005,	2.949,	2.862,	2.797,	2.741,	2.658},
			{3.193,	3.182,	3.129,	3.041,	2.970,	2.908,	2.814},
			{3.321,	3.344,	3.299,	3.216,	3.140,	3.073,	2.966},
			{3.417,	3.490,	3.458,	3.383,	3.305,	3.235,	3.116},
			{3.478,	3.615,	3.604,	3.543,	3.465,	3.393,	3.262},
			{3.495,	3.717,	3.736,	3.694,	3.618,	3.546,	3.404},
			{3.464,	3.792,	3.850,	3.833,	3.763,	3.693,	3.542},
			{3.377,	3.835,	3.946,	3.960,	3.900,	3.834,	3.676},
			{3.227,	3.844,	4.021,	4.071,	4.026,	3.968,	3.805},
			{2.980,	3.813,	4.072,	4.166,	4.141,	4.093,	3.929},
			{2.761,	3.738,	4.098,	4.242,	4.243,	4.208,	4.048},
			{2.569,	3.615,	4.097,	4.296,	4.330,	4.312,	4.161},
			{2.402,	3.439,	4.065,	4.328,	4.401,	4.404,	4.268},
			{2.256,	3.205,	4.001,	4.333,	4.454,	4.482,	4.369},
			{2.131,	3.014,	3.901,	4.310,	4.487,	4.546,	4.464},
			{2.025,	2.835,	3.764,	4.255,	4.499,	4.593,	4.552},
			{1.935,	2.679,	3.587,	4.167,	4.488,	4.622,	4.633},
			{1.860,	2.545,	3.367,	4.043,	4.451,	4.631,	4.745},
			{1.798,	2.431,	3.187,	3.878,	4.387,	4.620,	4.809},
			{1.748,	2.335,	3.022,	3.730,	4.263,	4.585,	4.840},
			{1.709,	2.255,	2.880,	3.548,	4.103,	4.526,	4.842},
			{1.678,	2.189,	2.760,	3.388,	3.951,	4.440,	4.819},
			{1.655,	2.135,	2.659,	3.246,	3.808,	4.326,	4.774},
			{1.638,	2.092,	2.575,	3.123,	3.673,	4.181,	4.712},
			{1.626,	2.059,	2.506,	3.015,	3.548,	4.058,	4.634},
			{1.618,	2.033,	2.450,	2.923,	3.432,	3.907,	4.544},
			{1.614,	2.015,	2.406,	2.844,	3.324,	3.768,	4.444},
			{1.612,	2.001,	2.371,	2.777,	3.226,	3.641,	4.339},
			{1.612,	1.993,	2.345,	2.721,	3.137,	3.525,	4.228},
			{1.612,	1.987,	2.326,	2.675,	3.057,	3.420,	4.116},
			{1.612,	1.984,	2.313,	2.637,	2.986,	3.327,	4.004},
			{1.613,	1.983,	2.304,	2.607,	2.924,	3.243,	3.893},
			{1.612,	1.982,	2.299,	2.583,	2.870,	3.170,	3.786},
			{1.610,	1.982,	2.296,	2.564,	2.824,	3.106,	3.683},
			{1.607,	1.981,	2.294,	2.550,	2.785,	3.052,	3.587},
			{1.603,	1.980,	2.294,	2.540,	2.754,	3.005,	3.497},
			{1.596,	1.977,	2.294,	2.533,	2.730,	2.967,	3.415},
			{1.588,	1.974,	2.293,	2.528,	2.712,	2.936,	3.341},
			{1.578,	1.968,	2.292,	2.525,	2.699,	2.911,	3.276},
			{1.566,	1.961,	2.290,	2.524,	2.692,	2.893,	3.219},
			{1.553,	1.953,	2.286,	2.522,	2.689,	2.879,	3.172},
			{1.540,	1.943,	2.281,	2.521,	2.690,	2.870,	3.133},
			{1.525,	1.931,	2.275,	2.520,	2.693,	2.865,	3.103},
			{1.510,	1.919,	2.267,	2.519,	2.698,	2.862,	3.080},
			{1.496,	1.906,	2.259,	2.516,	2.704,	2.862,	3.064},
			{1.483,	1.893,	2.249,	2.513,	2.710,	2.862,	3.053},
			{1.472,	1.880,	2.240,	2.509,	2.716,	2.863,	3.048},
			{1.463,	1.869,	2.231,	2.504,	2.719,	2.863,	3.045},
			{1.458,	1.859,	2.223,	2.498,	2.719,	2.861,	3.045},
			{1.458,	1.853,	2.216,	2.490,	2.714,	2.856,	3.044},
			{1.463,	1.850,	2.212,	2.483,	2.704,	2.848,	3.041},
			{1.475,	1.852,	2.212,	2.474,	2.687,	2.834,	3.033},
			{1.495,	1.860,	2.216,	2.465,	2.662,	2.814,	3.019},
			{1.524,	1.875,	2.227,	2.457,	2.627,	2.787,	2.996}
	};




	public static final double Kp0 = 0.0;
	public static final double Kp_end = 7.0;
	public static final double Kp_step = 1.0 / 3.0;

	// Таблица 10 — Значение величины K4'' для среднесуточных значений индекса Kp

	public static final double table_K4_2_24h[][] = {
			{-0.207,	-0.170,	-0.147,	-0.132,	-0.121,	-0.114,	-0.104},
			{-0.175,	-0.144,	-0.125,	-0.112,	-0.103,	-0.097,	-0.089},
			{-0.146,	-0.120,	-0.104,	-0.093,	-0.086,	-0.081,	-0.074},
			{-0.119,	-0.098,	-0.085,	-0.076,	-0.070,	-0.066,	-0.061},
			{-0.094,	-0.077,	-0.067,	-0.060,	-0.055,	-0.052,	-0.048},
			{-0.069,	-0.057,	-0.049,	-0.044,	-0.041,	-0.038,	-0.035},
			{-0.046,	-0.038,	-0.033,	-0.029,	-0.027,	-0.025,	-0.023},
			{-0.023,	-0.019,	-0.016,	-0.015,	-0.013,	-0.013,	-0.012},
			{0.000,		0.000,	0.000,	0.000,	0.000,	0.000,	0.000},
			{0.023,		0.019,	0.016,	0.015,	0.013,	0.013,	0.012},
			{0.047,		0.038,	0.033,	0.029,	0.027,	0.025,	0.023},
			{0.072,		0.058,	0.050,	0.045,	0.041,	0.039,	0.035},
			{0.098,		0.079,	0.068,	0.061,	0.056,	0.052,	0.048},
			{0.125,		0.102,	0.087,	0.078,	0.071,	0.067,	0.061},
			{0.155,		0.126,	0.108,	0.096,	0.088,	0.082,	0.075},
			{0.187,		0.151,	0.129,	0.115,	0.106,	0.099,	0.090},
			{0.222,		0.179,	0.153,	0.136,	0.125,	0.116,	0.106},
			{0.260,		0.209,	0.179,	0.159,	0.145,	0.136,	0.124},
			{0.302,		0.242,	0.206,	0.183,	0.168,	0.156,	0.143},
			{0.347,		0.278,	0.236,	0.210,	0.192,	0.179,	0.163},
			{0.397,		0.317,	0.269,	0.239,	0.218,	0.203,	0.185},
			{0.451,		0.360,	0.305,	0.271,	0.247,	0.230,	0.209}
	};

	// Таблица 11 — Значение величины К4'' для 3-часовых значений индекса Kp

	public static final double table_K4_2_3h[][] = {
			{-0.206,	-0.169,	-0.146,	-0.131,	-0.121,	-0.113,	-0.104},
			{-0.176,	-0.144,	-0.125,	-0.112,	-0.103,	-0.097,	-0.089},
			{-0.147,	-0.120,	-0.104,	-0.093,	-0.086,	-0.081,	-0.074},
			{-0.120,	-0.098,	-0.085,	-0.076,	-0.070,	-0.066,	-0.060},
			{-0.094,	-0.077,	-0.066,	-0.060,	-0.055,	-0.051,	-0.047},
			{-0.069,	-0.057,	-0.049,	-0.044,	-0.040,	-0.038,	-0.035},
			{-0.045,	-0.037,	-0.032,	-0.029,	-0.026,	-0.025,	-0.023},
			{-0.022,	-0.018,	-0.016,	-0.014,	-0.013,	-0.012,	-0.011},
			{0.000,		0.000,	0.000,	0.000,	0.000,	0.000,	0.000},
			{0.022,		0.018,	0.015,	0.014,	0.013,	0.012,	0.011},
			{0.044,		0.036,	0.031,	0.027,	0.025,	0.024,	0.022},
			{0.066,		0.053,	0.046,	0.041,	0.038,	0.035,	0.032},
			{0.088,		0.071,	0.061,	0.055,	0.050,	0.047,	0.043},
			{0.110,		0.089,	0.076,	0.068,	0.063,	0.058,	0.054},
			{0.133,		0.108,	0.092,	0.082,	0.075,	0.070,	0.065},
			{0.157,		0.127,	0.108,	0.097,	0.088,	0.083,	0.076},
			{0.182,		0.146,	0.125,	0.111,	0.102,	0.095,	0.087},
			{0.208,		0.167,	0.142,	0.127,	0.116,	0.108,	0.099},
			{0.235,		0.188,	0.161,	0.143,	0.131,	0.122,	0.111},
			{0.264,		0.211,	0.180,	0.160,	0.146,	0.136,	0.124},
			{0.295,		0.235,	0.200,	0.178,	0.162,	0.151,	0.137},
			{0.327,		0.261,	0.221,	0.197,	0.179,	0.167,	0.152}
	};



}
public class GOST_R_25645_166_2004 implements Atmosphere {

	private static final long serialVersionUID = -2480700653616643636L;
     /**
      *  кг / м ^ 3, плотность ночной атмосферы на высоте 120км
      */
	private static final double CONST_RHO_0	=	1.58868e-08;
	/**
	 * рад/с, угловая скорость вращения Земли
	 */
	private static final double CONST_OMEGA_Z	= 7.292115e-05;	
	
	
	//TODO:учесть время запаздывания
	
	/**
	 * запаздывание по F107
	 */
	private static final double CONST_dt_f107=	1.7;
	/**
	 * запаздывание по Kp
	 */
	private static final double CONST_dt_Kp	=	0.6;
	
	/**
	 * сут, запаздывание по kpp
	 */
	private static final double CONST_dt_kpp=	0.25;	
	
								//F107[81]
	double calcF81(final double F107[]) //значения F107 начиная с 80 суток перед текущей датой до текущей даты
	{
		/* формула по расчёту F81 из ГОСТ */
		double num = 0.0;
		double denom = 0.0;
		for (int i = -80; i < 1; i++)
		{
			double Wi = 1.0 + (0.5 * i) / 80.0;
			num += F107[i + 80] * Wi;
			denom += Wi;
		}
		double F81 = num / denom;
		return F81;
	}
	double atmosGOST_R_25645_166_2004(
			final double h_km,	// altitude above Earth ellipsoid 120<h_km<1500, km / высота над уровнем земного эллипсоида, от 120 до 1500, км 
			final double F107,	// F10.7 solar emission index / индекс солнечной активности
			final double Kp,	// квазилогарифмический планетарный среднесуточный индекс геомагнитной активности, баллы
			final double F81,	// averaged weighted F10.7 for previous 80 days + current day / усреднённый за 81 сутки (80 предыдущих + 1 текущие) и взвешенный индекс солнечной активности
			final double DoY,	// number of day from the beginning of the year / номер суток от начала года //TODO заменить на Mjd_TT
			final double X[],	// x, y, z - geocentric greenwich coordinates, km / гринвичские координаты точки пространства, км
			final double t_s,	// всемирное время, с
			final double S_rad,	// sidereal midnight time, rad / звёздное время в гринвическую полночь, рад
			final double alpha_rad,	// right ascention of the Sun, rad / прямое восхождение Солнца, рад
			final double delta_rad)	// declination of the Sun, rad / склонение Солнца, рад
		{
		
			// 1. Проверка корректности ввода, незначительно замедляет производительность
			if ((h_km < 120.0) || (h_km > 1500.0)) {
				//std::cerr << "Input parameters Altitude above ellipsoid h_km = " << h_km
				//	<<"km, while h must be 120 km <= h <= 1500 km." << std::endl;
				return -1.0;
			}
			if ((DoY < 0.0) || (DoY > 366.0)) {
				//std::cerr << "Day of year DoY = " << DoY
				//	<< ", while h must be 0 <= DoY <= 366." << std::endl;
				return -1.0;
			}
			if ((alpha_rad < 0.0) || (alpha_rad > 2*Math.PI)) {
				//std::cerr << "Right ascention alpha_rad = " << alpha_rad
				//	<< ", while alpha_rad must be 0 <= alpha_rad <= 2*PI." << std::endl;
				return -1.0;
			}
			if ((delta_rad < -Math.PI) || (delta_rad > Math.PI)) {
				//std::cerr << "Declination delta_rad = " << delta_rad
				//	<< ", while delta_rad must be -PI <= delta_rad <= PI." << std::endl;
				return -1.0;
			}
			

			// 2. Предварительный расчёт степеней от h_km, DoY, Kp:
			// h_vec = {1, h, h^2, h^3, ..., h^6}
			double h_vec[] = new double[7];
			h_vec[0] = 1.0;
			for (int i = 1; i < 7; i++)
			{
				h_vec[i] = h_vec[i - 1] * h_km;
			}

			// doy_vec = {1, DoY, DoY^2, DoY^3, ..., DoY^8}
			double doy_vec[] = new double[9];
			doy_vec[0] = 1.0;
			for (int i = 1; i < 9; i++)
			{
				doy_vec[i] = doy_vec[i - 1] * DoY;
			}

			double Kp_vec[] = new double[4];
			Kp_vec[0] = 1.0;
			for (int i = 1; i < 4; i++)
			{
				Kp_vec[i] = Kp_vec[i - 1] * Kp;
			}

			// 3. Выбор опорного значения индекса солнечной активности F0
			// и номера колонки для таблицы 2 или 3
			/*
			// альтернативный алгоритм поиска ближайшего  F0, показавший себя на 20-50% медленнее
			double F0 = 0.0;
			int n_col = 0.0;
			if (F81 <= 200.0 && F81 >= 75.0) {
				double tmp = round(F81 / 25.0);
				n_col = tmp - 3;
				F0 = tmp * 25.0;
			}
			else if (F81 <= 250.0 && F81 >= 200.0)
			{
				double tmp = round(F81 / 50.0);
				n_col = tmp + 1;
				F0 = tmp * 50.0;
			}
			else if (F81 < 75.0) {
				F0 = 75.0;
				n_col = 0;
			}
			else {
				F0 = round(F81 / 25) * 25.0;
				n_col = 6;
			} */

			int n_col = 0;
			double diff1 = Math.abs(GOST_R_25645_166_2014_CONST.F0_arr[n_col] - F81);
			double diff2 = diff1;
			while (n_col < 6)
			{
				n_col++;
				diff2 = Math.abs(GOST_R_25645_166_2014_CONST.F0_arr[n_col] - F81);
				if (diff1 <= diff2) {
					--n_col;
					break;
				}
				diff1 = diff2;
			}
			
			// 4. Выбор коэффициентов из таблиц, учитывая высоту (2 либо 3 таблицы ГОСТа)
			// в том порядке, в котором они приведены в таблицах 2-3
			double a[] = new double[7];
			if (h_km > GOST_R_25645_166_2014_CONST.a_high_table[0][n_col]) {
				for (int i = 0; i < 7; i++)
				{
					a[i] = GOST_R_25645_166_2014_CONST.a_high_table[i + 1][n_col];
				}
			}
			else {
				for (int i = 0; i < 7; i++)
				{
					a[i] = GOST_R_25645_166_2014_CONST.a_low_table[i + 1][n_col];
				}
			}

			double b[] = new double[5];
			if (h_km > GOST_R_25645_166_2014_CONST.b_high_table[0][n_col]) {
				for (int i = 0; i < 5; i++)
				{
					b[i] = GOST_R_25645_166_2014_CONST.b_high_table[i + 1][n_col];
				}
			}
			else {
				for (int i = 0; i < 5; i++)
				{
					b[i] = GOST_R_25645_166_2014_CONST.b_low_table[i + 1][n_col];
				}
			}

			double c[] = new double[5];
			if (h_km > GOST_R_25645_166_2014_CONST.c_high_table[0][n_col]) {
				for (int i = 0; i < 5; i++)
				{
					c[i] = GOST_R_25645_166_2014_CONST.c_high_table[i + 1][n_col];
				}
			}
			else {
				for (int i = 0; i < 5; i++)
				{
					c[i] = GOST_R_25645_166_2014_CONST.c_low_table[i + 1][n_col];
				}
			}

			double n[] = new double[3];
			if (h_km > GOST_R_25645_166_2014_CONST.c_high_table[0][n_col]) { // высота именно из таблицы коэффициента c
				for (int i = 0; i < 3; i++)
				{
					n[i] = GOST_R_25645_166_2014_CONST.n_high_table[i][n_col];
				}
			}
			else {
				for (int i = 0; i < 3; i++)
				{
					n[i] = GOST_R_25645_166_2014_CONST.n_low_table[i][n_col];
				}
			}

			// коэффициент модели, равный углу запаздывания максимума плотности по отношению к максимуму освещённости, рад
			double phi1 = 0.0;
			if (h_km > GOST_R_25645_166_2014_CONST.c_high_table[0][n_col]) { // высота именно из таблицы коэффициента c
				phi1 = GOST_R_25645_166_2014_CONST.phi1_high_table[n_col];
			}
			else {
				phi1 = GOST_R_25645_166_2014_CONST.phi1_low_table[n_col];
			}

			double d[] = new double[5];
			if (h_km > GOST_R_25645_166_2014_CONST.d_high_table[0][n_col]) {
				for (int i = 0; i < 5; i++)
				{
					d[i] = GOST_R_25645_166_2014_CONST.d_high_table[i + 1][n_col];
				}
			}
			else {
				for (int i = 0; i < 5; i++)
				{
					d[i] = GOST_R_25645_166_2014_CONST.d_low_table[i + 1][n_col];
				}
			}

			double e[] = new double[9];
			if (h_km > GOST_R_25645_166_2014_CONST.e_high_table[0][n_col]) {
				for (int i = 0; i < 9; i++)
				{
					e[i] = GOST_R_25645_166_2014_CONST.e_high_table[i + 1][n_col];
				}
			}
			else {
				for (int i = 0; i < 9; i++)
				{
					e[i] = GOST_R_25645_166_2014_CONST.e_low_table[i + 1][n_col];
				}
			}

			double et[] = new double[9];
			if (h_km > GOST_R_25645_166_2014_CONST.e_high_table[0][n_col]) { // высота именно из таблицы коэффициента e
				for (int i = 0; i < 4; i++)
				{
					et[i] = GOST_R_25645_166_2014_CONST.et_high_table[i][n_col];
				}
			}
			else {
				for (int i = 0; i < 4; i++)
				{
					et[i] = GOST_R_25645_166_2014_CONST.et_low_table[i][n_col];
				}
			}

			double l[] = new double[5];
			if (h_km > GOST_R_25645_166_2014_CONST.l_high_table[0][n_col]) {
				for (int i = 0; i < 5; i++)
				{
					l[i] = GOST_R_25645_166_2014_CONST.l_high_table[i + 1][n_col];
				}
			}
			else {
				for (int i = 0; i < 5; i++)
				{
					l[i] = GOST_R_25645_166_2014_CONST.l_low_table[i + 1][n_col];
				}
			}

			// 5. Расчёт коэффициентов K0-K4
			// 5.1 коэффициент K0, учитывающий изменение плотности атмосферы, связанное с отклонением
			double K0 = 0.0;
			for (int i = 0; i < 5; i++) // сборка полинома
			{
				K0 += l[i] * h_vec[i];
			};

			K0 *= (F81 - GOST_R_25645_166_2014_CONST.F0_arr[n_col]) / GOST_R_25645_166_2014_CONST.F0_arr[n_col] + 1.0; // коэффициент в связи с отклонением F81 от F0

			// 5.2 коффициент K1, учитывающий суточный эффект в распределении плотности
			double K1 = 0.0; // (c' * h_vec(1:5) ) * (cos_phi ^ ( n * h_vec(1:3) )) / 2; // суточный коэффициент распределения плотности
			for (int i = 0; i < 5; i++) // сборка полинома
			{
				K1 += c[i] * h_vec[i];
			};

			double cos_power = 0.0;
			for (int i = 0; i < 3; i++) // сборка полинома
			{
				cos_power += n[i] * h_vec[i];
			};

			double r = Math.sqrt(X[0]* X[0] + X[1]*X[1] + X[2]*X[2]); // расстояние от центра гривничской СК

			// разность между долготой, для которой рассчитывают плотность атмосферы
			// и долготой с максимальным значением плотности в её суточном распределении, рад
			double beta_rad = alpha_rad - S_rad - CONST_OMEGA_Z * t_s + phi1;

			double cos_phi = 1 / r * (X[2] * Math.sin(delta_rad)
				+ Math.cos(delta_rad) * (X[0] * Math.cos(beta_rad) + X[1] * Math.sin(beta_rad)));
			K1 *= Math.pow(cos_phi, cos_power)/2;

			// 5.3 коэффициент K2, учитывающий полугодовой эффект
			double K2 = 0.0;
			for (int i = 0; i < 5; i++) // сборка полинома
			{
				K2 += d[i] * h_vec[i];
			}

			double Ad = 0.0;
			for (int i = 0; i < 9; i++) // сборка полинома
			{
				Ad += GOST_R_25645_166_2014_CONST.A[i] * doy_vec[i]; // полугодовой коэффициент
			}
			K2 *= Ad;

			// 5.4 коэффициент K3, учитывающий изменение плотности, связанное с отклонением F107 от F81
			double K3 = 0.0;
			for (int i = 0; i < 5; i++) // сборка полинома
			{
				K3 += b[i] * h_vec[i];
			}


			K3 *= (F107 - F81) / (F81 + Math.abs(F107 - F81)); // изменение плотности в связи с отклонением F10.7 от F81

			// 5.5 Расчёт коэффициента K4, учитывающий зависимость плотности атмосферы от геомагнитной возмущенности
			// при использовании среднесуточных коэффициентов геомагнитной активности
			// e[5]...e[8]  и  Kp, при использовании 3-х часовых - et[5]...et[8] и kpp
			double K4_1 = 0.0; // первый множитель K4
			for (int i = 0; i < 5; i++) // сборка полинома
			{
				K4_1 += e[i] * h_vec[i];
			}

			double K4_2 = 0.0; // второй множитель K4
			for (int i = 0; i < 4; i++) // сборка полинома
			{
				K4_2 += e[i+5] * Kp_vec[i];
			}

			double K4 = K4_1 * K4_2;

			// 5.6 финальная формула
			double polynom = 0.0;
			for (int i = 0; i < 7; i++) // сборка полинома
			{
				polynom += a[i] * h_vec[i];
			}
			double rho_night = CONST_RHO_0 * Math.exp(polynom);


			return rho_night * K0 * (1 + K1 + K2 + K3 + K4);
		}
	@Override
	public Frame getFrame() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double getDensity(AbsoluteDate date, Vector3D position, Frame frame) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public <T extends RealFieldElement<T>> T getDensity(FieldAbsoluteDate<T> date, FieldVector3D<T> position,
			Frame frame) {
		// TODO Auto-generated method stub
		return null;
	}

}
